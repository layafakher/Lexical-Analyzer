lexer grammar Phase2;
WS: ( ' '| '\t' | '\r' | '\n') ->skip;
Boolean: 'boolean';
Int: 'int';
Float: 'float';
While: 'while';
For: 'for';
If: 'if';
Else: 'else';
ElseIf: 'else if';
Continue: 'continue';
Break: 'break';
True: 'true';
False: 'false';
Equals: '==';
Assignment: '=';
Greater: '>';
Less: '<';
GreaterEqual: '>=';
LessEqual: '<=';
Not: '!';
Add: '+';
Subtraction: '-';
BitwiseNegation: '~';
LogicalXor: '^';
ArtihmeticAnd: '&';
LogicalAnd: '&&';
ArtihmeticOr: '|';
LogicalOr: '||';
Multiplication: '*';
Division: '/';
Increment: '++';
Decrement: '--';
Mod: '%';
OpenParenthesis: '(';
CloseParenthesis: ')';
SemiColon: ';';
NotEqual: '!=';
OpenCurlyBrace: '{';
CloseCurlyBrace: '}';
ID  :	('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9')*;
IntConst: ('+'|'-')?'0'..'9'+;
FloatConst: ('0'..'9'+)'.'('0'..'9'+) | '.'('0'..'9'+) | ('0'..'9'+)'.';